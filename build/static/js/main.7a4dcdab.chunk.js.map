{"version":3,"sources":["Form.js","ListView.js","RecipeView.js","GroceryListView.js","Navigation.js","Cooking.js","index.js"],"names":["Form","props","className","onSubmit","request","type","name","placeholder","id","value","searchButton","ListView","handleClick","setCurrentRecipe","steps","ingredients","quantity","link","img","site","setRecipeView","onClick","str","toLowerCase","split","i","length","charAt","toUpperCase","slice","join","title_case","convert","matched_recipe","updatedList","recipeList","filter","recipe","text","dish","setRecipeList","deleteItem","uuid","RecipeView","combined_ingredients","src","alt","image_render","map","ingredient","step","href","GroceryListView","List","list","sort","item","updatedGroceryList","setGroceryList","removeItem","Navigation","currentTab","setCurrentTab","Cooking","useState","JSON","parse","localStorage","getItem","currentRecipe","groceryList","recipeView","setSearchButton","onlyUnique","index","self","indexOf","buttonReset","setTimeout","useEffect","setItem","stringify","requestHandler","e","a","preventDefault","searchTerm","target","elements","console","log","search_req","fetch","result","json","search_json","some","url","key","concat","parsed_ingredients","RecipeList","cur","class","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a4dcdab.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = props => (\n\t<div className=\"container\">\n\t<div className=\"search-container\">\n\t<form onSubmit={props.request}>\n\t\t<input type=\"text\" className=\"Textbox\" name=\"searchTerm\" placeholder=\"enter recipe\"/>\n\t\t\n\t\t<div className=\"search-button-container\">\n\t\t<select className=\"site-selection\" id=\"site\" name=\"site\">\n    \t\t<option value=\"cooking.nytimes\">NYT Cooking</option>\n    \t\t<option value=\"bonappetit\">Bon Appetit</option>\n    \t\t<option value=\"seriouseats\">Serious Eats</option>\n    \t\t<option value=\"epicurious\">Epicurious</option>\n  \t\t</select>\n\t\t<button className=\"Search-button\">{props.searchButton}</button>\n\t\t</div>\n\t</form>\n\t</div>\n\t</div>\n);\n\nexport default Form;","import React from \"react\";\nimport { v4 as uuid } from 'uuid';\n \n\n\nconst ListView = (props) => {\n    \n    const handleClick = () => {    \n        props.setCurrentRecipe({name: props.name, \n                    steps: props.steps, \n                    ingredients: props.ingredients, \n                    quantity: props.quantity, \n                    link: props.link,\n                    img: props.img,\n                    site: props.site})\n        props.setRecipeView(\"current_recipe\");\n    }\n\n    const title_case = (str) => {\n        str = str.toLowerCase();\n        str = str.split(' ');\n        for (var i = 0; i < str.length; i++) {\n            str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n        }\n        return str.join(' ')\n    }  \n\n    const convert = (site) => {\n\n        switch (site){\n            case \"cooking.nytimes\":\n                return \"NYT Cooking\";\n            case \"epicurious\":\n                return \"Epicurious\"\n            case \"bonappetit\":\n                return \"Bon Appetit\"\n            case \"seriouseats\":\n                return \"Serious Eats\";\n            default:\n                return \"\";\n        }\n    }\n\n    const deleteItem = (matched_recipe) => {\n        const updatedList = [...props.recipeList].filter((recipe) => recipe.text.dish !== matched_recipe);\n        props.setRecipeList(updatedList)\n    }\n  \n    return (\n        <div className=\"container\">\n            <div className=\"box\" key={uuid()}>\n                <div className=\"box-recipe\" onClick={handleClick}>{title_case(props.name)}</div>\n                <div className=\"box-site\" onClick={handleClick}>{convert(props.site)}</div>\n                <div className=\"recipe-delete-button\" onClick={() => deleteItem(props.name)}>╳</div>\n            </div>\n        </div>\n    )\n}\n\nexport default ListView;\n\n// <button onClick={() => deleteItem(props.key)}>X</button>","import { v4 as uuid } from 'uuid';\n\n\nconst RecipeView = (props) => {\n\n        const combined_ingredients = []\n\n        for (let i in props.ingredients){\n            if (props.quantity[i])\n                combined_ingredients[i] = props.quantity[i] + \" \" + props.ingredients[i]\n            else {\n                combined_ingredients[i] = props.ingredients[i];\n            }\n        }\n        \n        const title_case = (str) => {\n            str = str.toLowerCase();\n            str = str.split(' ');\n            for (var i = 0; i < str.length; i++) {\n                str[i] = str[i].charAt(0).toUpperCase() + str[i].slice(1);\n            }\n            return str.join(' ')\n        }  \n        \n        const image_render = () => {\n            if (props.img) {\n                return <img src={props.img} alt={props.name}></img>     \n            }\n        }\n        \n        return (\n            <div>\n                <div className=\"container\">\n                    <div className=\"title-box\">\n                    <div className=\"title-text\"> {title_case(props.name)} </div>\n                        <button className=\"back-button\" onClick={() => props.setRecipeView(\"list\")}>ᐊ</button>\n                    </div>\n                </div>\n                <div className=\"container\">\n                    <div className=\"recipe-box\">\n                        {image_render()}\n                        <h3 id=\"ingredients\">Ingredients:</h3>\n                            <div >{combined_ingredients.map((ingredient) => <li className=\"ingredients\" key={uuid()}>{ingredient}</li>)}</div>\n                        <h3 id=\"steps\">Steps:</h3>\n                            <div><ol>{props.steps.map((step) => <li key={uuid()}>{step}<br></br><br></br></li>)}</ol></div>\n                        <h3 className=\"origin-link\"><a href={props.link}>Go to original page</a></h3>\n                    </div> \n                </div>\n            </div>    \n        ) \n}\n\n\nexport default RecipeView;","import React from 'react';\nimport { v4 as uuid } from 'uuid';\n\nconst GroceryListView = (props) => {\n\n\n    \n    const removeItem = (item) => {\n        const updatedGroceryList = [...props.list].filter((ingredient) => ingredient !== item);\n        props.setGroceryList(updatedGroceryList);\n    } \n\n    \n\n    //<button className=\"grocery-edit-button\" onClick={() => setTodoEditing(item)}>✎</button> &nbsp;\n    \n    const List = () => (\n        <div className=\"container\">\n    \n   \n            <div className=\"scroll-box-grocery-view\">\n                &nbsp;\n                    {props.list.sort().map((item) => \n                        <div className=\"container\">\n                            <li className=\"grocery-list-item\" key={uuid()}>\n                                <button className=\"grocery-edit-button\" onClick={() => removeItem(item)}>╳</button> &nbsp;\n                                \n                                {item}\n                            </li> \n                            <div className=\"check-container\"><input type=\"checkbox\"></input> &nbsp;</div>\n                        </div>)\n                    }\n            </div>\n        </div>\n    )\n    \n    return (\n        <div>\n            <List />\n        </div>\n    )\n}\n\nexport default GroceryListView;\n\n\n\n//https://www.google.com/search?q=pesto+site:%22bonappetit.com%22&btnI","import { React } from 'react';\n\nconst Navigation = (props) => {\n\n    if (props.currentTab === \"recipes\") {\n        return (\n            <div className=\"container\">\n                <div className=\"recipes-tab-active\">Recipes</div>\n                <div className=\"grocery-tab-inactive\" onClick={() => props.setCurrentTab(\"grocery_list\")}>Grocery List</div>\n            </div>\n        )\n    }\n\n    else if (props.currentTab === \"grocery_list\") {\n        return (\n            <div className=\"container\">\n                <div className=\"recipes-tab-inactive\" onClick={() => props.setCurrentTab(\"recipes\")}>Recipes</div>\n                <div className=\"grocery-tab-active\">Grocery List</div>\n            </div>\n        )\n    }\n}\n\nexport default Navigation;","import React, { useState, useEffect } from \"react\";\nimport Form from './Form';\nimport ListView from './ListView';\nimport RecipeView from './RecipeView'\nimport GroceryListView from './GroceryListView'\nimport Navigation from './Navigation'\nimport { v4 as uuid } from 'uuid';\n\n\n//const fetch = require(\"node-fetch\");\n\nconst Cooking = () => {\n\n    const [recipeList, setRecipeList] = useState(JSON.parse(localStorage.getItem('recipeListSaved')) || []);\n    const [currentRecipe, setCurrentRecipe] = useState({name: \"\", steps: \"\", ingredients: \"\", quantity: \"\", link: \"\", img: \"\", site: \"\"});\n    const [groceryList, setGroceryList] = useState(JSON.parse(localStorage.getItem('groceryListSaved')) || []);\n    const [currentTab, setCurrentTab] = useState(\"recipes\");\n    const [recipeView, setRecipeView] = useState(\"list\");\n    const [searchButton, setSearchButton] = useState(\"Search\");\n    //const [recipeList, setRecipeList] = useState(JSON.parse(localStorage.getItem('recipeListSaved')) || []);\n    \n    useEffect(() => {\n        localStorage.setItem('recipeListSaved', JSON.stringify(recipeList));\n      }, [recipeList]);\n\n      useEffect(() => {\n        localStorage.setItem('groceryListSaved', JSON.stringify(groceryList));\n      }, [groceryList]);\n    \n\n    function onlyUnique(value, index, self) {\n        return self.indexOf(value) === index;\n      }\n\n    function buttonReset() {\n        setTimeout(() => setSearchButton(\"Search\"), 3000)\n    }\n    \n    const requestHandler = async (e) => {\n        setSearchButton(\"Searching...\")\n        e.preventDefault()\n        const searchTerm = e.target.elements.searchTerm.value;\n        const site = e.target.elements.site.value;\n        if (!searchTerm || !site) {\n            console.log(\"error\");\n            setSearchButton(\"Field blank!\");\n            buttonReset()       \n        }\n        \n        const search_req = `https://teaspoonapp.herokuapp.com/?term=${searchTerm}&site=${site}`;     \n        const result = await fetch(search_req)\n        const search_json = await result.json();\n\n        if (recipeList.some(recipe => recipe.text.url === search_json.url)){\n            setSearchButton(\"Already saved!\");\n            buttonReset()       \n        } else if (search_json.dish !== [] && search_json.steps !== [] && search_json.ingredients !== []){\n            setSearchButton(\"Recipe added!\");\n            buttonReset()\n            setRecipeList([{text: search_json, key: uuid()}, ...recipeList]);\n            setGroceryList([...groceryList.concat(search_json.parsed_ingredients)].filter(onlyUnique))\n        } else {\n            setSearchButton(\"No recipe found.\");\n            buttonReset()\n        }\n        return;\n    }\n\n    \n\n    const RecipeList = () => (\n        <div className=\"container\">\n            <div className=\"scroll-box-main-view\">\n                    {recipeList.map(recipe => <ListView \n                                                cur={currentRecipe} \n                                                setCurrentRecipe={setCurrentRecipe}\n                                                currentRecipe={currentRecipe}\n                                                recipeList={recipeList}\n                                                setRecipeList={setRecipeList} \n                                                name={recipe.text.dish} \n                                                steps={recipe.text.steps} \n                                                ingredients={recipe.text.ingredients} \n                                                quantity={recipe.text.quantity}\n                                                link={recipe.text.url}\n                                                key={recipe.key}\n                                                img={recipe.text.img}\n                                                setRecipeView={setRecipeView}\n                                                site={recipe.text.site}>\n                                            </ListView>)}\n            </div>\n        </div>\n    )\n\n\n    if (currentTab === \"recipes\" && recipeView === \"list\") {\n        return (    \n            <div>\n                <div className=\"logo-header\">\n                <div className=\"logo\">teaspoon</div>\n                <div className=\"info\" onClick={() => setCurrentTab('info')}>ⓘ</div>\n                </div>\n                <Navigation currentTab={currentTab} setCurrentTab={setCurrentTab}></Navigation>\n                <Form request={requestHandler} searchButton={searchButton}/>\n                <RecipeList />    \n            </div>\n        ) \n    }\n\n    else if (currentTab === \"recipes\" && recipeView === \"current_recipe\") {\n        return (\n            <div>\n                <div className=\"logo-header\">\n                <div className=\"logo\">teaspoon</div>\n                <div className=\"info\" onClick={() => setCurrentTab('info')}>ⓘ</div>\n                </div>\n                <Navigation currentTab={currentTab} setCurrentTab={setCurrentTab}></Navigation>\n                <RecipeView \n                        name={currentRecipe.name}\n                        steps={currentRecipe.steps}\n                        ingredients={currentRecipe.ingredients}\n                        quantity={currentRecipe.quantity}\n                        link={currentRecipe.link}\n                        img={currentRecipe.img}\n                        recipeView={recipeView}\n                        setRecipeView={setRecipeView}/>\n            </div>\n        )\n    }\n\n    else if (currentTab === 'info'){\n        return (\n            <div>\n                <div className=\"logo-header\">\n                    <div className=\"logo\">teaspoon</div>\n                </div>\n                <div className=\"info-box\">\n                    <div className=\"about\">About:</div>\n                    <div className=\"info-back\" onClick={() => setCurrentTab('recipes')}>x</div>\n                    <div className=\"info-text\">\n                        <p>\n                        teaspoon is a web app that allows you to search and save recipes from a selection of recipe websites,\n                        as well as generating a grocery list from them.\n                        the app is an early attempt to make a universal platform and clean user interface for compiling and viewing recipes on the web, which can often be a \n                        fragmented and cumbersome experience! \n                        <br></br><br></br>\n                        teaspoon was created by amad ansari using react, express, and node.js. you can find his other projects <a class=\"personal-site-link\" href=\"https://amad.cool\">here</a>.\n                        <br></br><br></br>\n                        the search feature currently works best with the exact names of recipes as present on their orignal webpages.\n                        the app is a work in progress, and some features (especially ingredient parsing and fetched images from epicurious or serious eats) can be buggy! \n                        please email amad@nyu.edu if you find any bugs, have any feature requests,\n                        would like to contribute, or are knowledgable about natural language processing and want to help build a more sophisticated parser :)\n                        </p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    else {\n        return (    \n            <div>\n                <div className=\"logo-header\">\n                    <div className=\"logo\">teaspoon</div>\n                    <div className=\"info\" onClick={() => setCurrentTab('info')}>ⓘ</div>\n                </div>\n                <Navigation currentTab={currentTab} setCurrentTab={setCurrentTab}></Navigation>\n                <GroceryListView list={groceryList} setGroceryList={setGroceryList}/>  \n            </div>\n        )\n    }    \n}\n\nexport default Cooking;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Cooking from './Cooking';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Cooking />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}